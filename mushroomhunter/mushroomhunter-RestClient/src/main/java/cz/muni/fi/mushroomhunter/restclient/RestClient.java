/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.mushroomhunter.restclient;

import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;

/**
 *
 * @author Simon Hochla
 */
public class RestClient extends javax.swing.JFrame {

    private AllLocationSwingWorker allLocationSwingWorker;
    private AllMushroomsSwingWorker allMushroomsSwingWorker;
    private LocationCreateSwingWorker locationCreateSwingWorker;
    private LocationDeleteSwingWorker locationDeleteSwingWorker;
    private LocationUpdateSwingWorker locationUpdateSwingWorker;
    private MushroomCreateSwingWorker mushroomCreateSwingWorker;
    private MushroomDeleteSwingWorker mushroomDeleteSwingWorker;
    private MushroomUpdateSwingWorker mushroomUpdateSwingWorker;
    
    /**
     * URL of the server running the rest service
     */
    public static final String SERVER_URL = "http://localhost:1527/pa165";
    
    /**
     * Username for the user who should be present in the database, has administrator privileges
     */
    public static final String USER_NAME = "rest";
    
    /**
     * Password for the user who should be present in the database, has administrator privileges
     */
    public static final String PASSWORD = "rest";
    
    /**
     * Creates new form mainFrame
     */
    public RestClient() {
        initComponents();
        
        allLocationSwingWorker = new AllLocationSwingWorker(this);
        allMushroomsSwingWorker = new AllMushroomsSwingWorker(this);
        
        //show all locations after starting the client 
        allLocationSwingWorker.execute();
        
        //show all mushrooms after starting the client
        allMushroomsSwingWorker.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMushroom = new javax.swing.JTable();
        bMushroomDelete = new javax.swing.JButton();
        bMushroomUpdate = new javax.swing.JButton();
        bMushroomCreate = new javax.swing.JButton();
        tfMushroomName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lMessageMushrooms = new javax.swing.JLabel();
        comboBoxMushroomStartOfOccurence = new javax.swing.JComboBox();
        comboBoxMushroomEndOfOccurence = new javax.swing.JComboBox();
        comboBoxMushroomType = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLocation = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfLocationName = new javax.swing.JTextField();
        tfLocationDescription = new javax.swing.JTextField();
        tfLocationNearCity = new javax.swing.JTextField();
        bLocationCreate = new javax.swing.JButton();
        bLocationUpdate = new javax.swing.JButton();
        bLocationDelete = new javax.swing.JButton();
        lMessageLocations = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblMushroom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Start of occurence", "End of occurence"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblMushroom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMushroomMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblMushroom);

        bMushroomDelete.setText("Delete mushroom");
        bMushroomDelete.setEnabled(false);
        bMushroomDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMushroomDeleteActionPerformed(evt);
            }
        });

        bMushroomUpdate.setText("Update mushroom");
        bMushroomUpdate.setEnabled(false);
        bMushroomUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMushroomUpdateActionPerformed(evt);
            }
        });

        bMushroomCreate.setText("Create mushroom");
        bMushroomCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMushroomCreateActionPerformed(evt);
            }
        });

        tfMushroomName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfMushroomNameActionPerformed(evt);
            }
        });

        jLabel4.setText("Name");

        jLabel5.setText("Type");

        jLabel6.setText("Start of occurence");

        jLabel8.setText("End of occurence");

        lMessageMushrooms.setForeground(java.awt.Color.red);

        comboBoxMushroomStartOfOccurence.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--choose month--", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        comboBoxMushroomEndOfOccurence.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--choose month--", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        comboBoxMushroomType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--choose type--", "EDIBLE", "INEDIBLE", "POISONOUS" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bMushroomCreate)
                            .addComponent(jLabel8)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboBoxMushroomEndOfOccurence, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(bMushroomUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bMushroomDelete))
                            .addComponent(comboBoxMushroomStartOfOccurence, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxMushroomType, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfMushroomName, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
                    .addComponent(lMessageMushrooms, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfMushroomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboBoxMushroomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboBoxMushroomStartOfOccurence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(comboBoxMushroomEndOfOccurence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bMushroomCreate)
                    .addComponent(bMushroomDelete)
                    .addComponent(bMushroomUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lMessageMushrooms, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Manage mushrooms", jPanel1);

        tblLocation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Description", "Near city"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblLocation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLocationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblLocation);

        jLabel1.setText("Name");

        jLabel2.setText("Description");

        jLabel3.setText("Near city");

        tfLocationName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfLocationNameActionPerformed(evt);
            }
        });

        bLocationCreate.setText("Create location");
        bLocationCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLocationCreateActionPerformed(evt);
            }
        });

        bLocationUpdate.setText("Update location");
        bLocationUpdate.setEnabled(false);
        bLocationUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLocationUpdateActionPerformed(evt);
            }
        });

        bLocationDelete.setText("Delete location");
        bLocationDelete.setEnabled(false);
        bLocationDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLocationDeleteActionPerformed(evt);
            }
        });

        lMessageLocations.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfLocationNearCity)
                                    .addComponent(tfLocationDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                                    .addComponent(tfLocationName)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(bLocationCreate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bLocationUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bLocationDelete)))
                        .addGap(0, 411, Short.MAX_VALUE))
                    .addComponent(lMessageLocations, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfLocationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfLocationDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfLocationNearCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bLocationCreate)
                    .addComponent(bLocationDelete)
                    .addComponent(bLocationUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lMessageLocations, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manage locations", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bLocationCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLocationCreateActionPerformed
        lMessageLocations.setText("");
        DefaultTableModel model = (DefaultTableModel) tblLocation.getModel();
        if (tfLocationName.getText().trim().equals("")) {
            lMessageLocations.setText("Location name cannot be empty.");
            return;
        }
        if (tfLocationName.getText().trim().length() > 20) {
            lMessageLocations.setText("Location cannot be longer than 20 characters.");
            return;
        }
        if (tfLocationDescription.getText().trim().length() > 200) {
            lMessageLocations.setText("Location cannot be longer than 200 characters.");
            return;
        }
        if (tfLocationNearCity.getText().trim().length() > 20) {
            lMessageLocations.setText("Location cannot be longer than 20 characters.");
            return;
        }
        locationCreateSwingWorker = new LocationCreateSwingWorker(this);
        locationCreateSwingWorker.execute();
    }//GEN-LAST:event_bLocationCreateActionPerformed

    private void bLocationUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLocationUpdateActionPerformed
        lMessageLocations.setText("");
        
        if (tfLocationName.getText().trim().equals("")) {
            lMessageLocations.setText("Location name cannot be empty.");
            return;
        }
        if (tfLocationName.getText().trim().length() > 200) {
            lMessageLocations.setText("Location cannot be longer than 20 characters.");
            return;
        }
        if (tfLocationDescription.getText().trim().length() > 20) {
            lMessageLocations.setText("Location cannot be longer than 200 characters.");
            return;
        }
        if (tfLocationNearCity.getText().trim().length() > 20) {
            lMessageLocations.setText("Location cannot be longer than 20 characters.");
            return;
        }
        
        if (tblLocation.getSelectedRow() == -1) {
            if (tblLocation.getRowCount() == 0) {
                lMessageLocations.setText("There are no locations to be updated.");
            } else {
                lMessageLocations.setText("Please select single location.");
            }
        } else {
            locationUpdateSwingWorker = new LocationUpdateSwingWorker(this);
            locationUpdateSwingWorker.execute();
        }
    }//GEN-LAST:event_bLocationUpdateActionPerformed

    private void bLocationDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLocationDeleteActionPerformed
        bLocationDelete.setEnabled(false);
        bLocationUpdate.setEnabled(false);

        if (tblLocation.getSelectedRow() == -1) {
            if (tblLocation.getRowCount() == 0) {
                lMessageLocations.setText("There are no locations to be deleted.");
            } else {
                lMessageLocations.setText("Please select single location.");
            }
        } else {
            locationDeleteSwingWorker = new LocationDeleteSwingWorker(this);
            locationDeleteSwingWorker.execute();
        }
    }//GEN-LAST:event_bLocationDeleteActionPerformed

    private void tfLocationNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfLocationNameActionPerformed
    }//GEN-LAST:event_tfLocationNameActionPerformed


    private void tblLocationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLocationMouseClicked
        bLocationDelete.setEnabled(true);
        bLocationUpdate.setEnabled(true);

        DefaultTableModel model = (DefaultTableModel) tblLocation.getModel();
        tfLocationName.setText(model.getValueAt(tblLocation.getSelectedRow(), 0).toString());
        tfLocationDescription.setText(model.getValueAt(tblLocation.getSelectedRow(), 1).toString());
        tfLocationNearCity.setText(model.getValueAt(tblLocation.getSelectedRow(), 2).toString());
    }//GEN-LAST:event_tblLocationMouseClicked

    private void tfMushroomNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfMushroomNameActionPerformed

    }//GEN-LAST:event_tfMushroomNameActionPerformed

    private void bMushroomCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMushroomCreateActionPerformed
        lMessageMushrooms.setText("");
        if (tfMushroomName.getText().trim().equals("")) {
            lMessageMushrooms.setText("Mushroom name cannot be empty.");
            return;
        }
        if (comboBoxMushroomType.getSelectedItem().equals("--choose type--")) {
            lMessageMushrooms.setText("Mushroom type cannot be empty.");
            return;
        }
        if (comboBoxMushroomStartOfOccurence.getSelectedItem().equals("--choose month--")) {
            lMessageMushrooms.setText("Mushroom start of occurence cannot be empty.");
            return;
        }
        if (comboBoxMushroomEndOfOccurence.getSelectedItem().equals("--choose month--")) {
            lMessageMushrooms.setText("Mushroom end of occurence cannot be empty.");
            return;
        }
        mushroomCreateSwingWorker = new MushroomCreateSwingWorker(this);
        mushroomCreateSwingWorker.execute();
    }//GEN-LAST:event_bMushroomCreateActionPerformed

    private void bMushroomUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMushroomUpdateActionPerformed
        lMessageMushrooms.setText("");

        if (tfMushroomName.getText().trim().equals("")) {
            lMessageMushrooms.setText("Mushroom name cannot be empty.");
            return;
        }
        if (comboBoxMushroomType.getSelectedItem().equals("--choose type--")) {
            lMessageMushrooms.setText("Mushroom type cannot be empty.");
            return;
        }
        if (comboBoxMushroomStartOfOccurence.getSelectedItem().equals("--choose month--")) {
            lMessageMushrooms.setText("Mushroom start of occurence cannot be empty.");
            return;
        }
        if (comboBoxMushroomEndOfOccurence.getSelectedItem().equals("--choose month--")) {
            lMessageMushrooms.setText("Mushroom end of occurence cannot be empty.");
            return;
        }

        if (tblMushroom.getSelectedRow() == -1) {
            if (tblMushroom.getRowCount() == 0) {
                lMessageMushrooms.setText("There are no mushrooms to be updated.");
            } else {
                lMessageMushrooms.setText("Please select single mushroom.");
            }
        } else {
            mushroomUpdateSwingWorker = new MushroomUpdateSwingWorker(this);
            mushroomUpdateSwingWorker.execute();
        }
    }//GEN-LAST:event_bMushroomUpdateActionPerformed

    private void bMushroomDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMushroomDeleteActionPerformed
        bMushroomDelete.setEnabled(false);
        bMushroomUpdate.setEnabled(false);

        if (tblMushroom.getSelectedRow() == -1) {
            if (tblMushroom.getRowCount() == 0) {
                lMessageMushrooms.setText("There are no mushrooms to be deleted.");
            } else {
                lMessageMushrooms.setText("Please select single mushroom.");
            }
        } else {
            mushroomDeleteSwingWorker = new MushroomDeleteSwingWorker(this);
            mushroomDeleteSwingWorker.execute();
        }
    }//GEN-LAST:event_bMushroomDeleteActionPerformed

    private void tblMushroomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMushroomMouseClicked
        bMushroomDelete.setEnabled(true);
        bMushroomUpdate.setEnabled(true);

        DefaultTableModel model = (DefaultTableModel) tblMushroom.getModel();
        tfMushroomName.setText(model.getValueAt(tblMushroom.getSelectedRow(), 0).toString());
        comboBoxMushroomType.setSelectedItem(model.getValueAt(tblMushroom.getSelectedRow(), 1).toString());
        comboBoxMushroomStartOfOccurence.setSelectedItem(model.getValueAt(tblMushroom.getSelectedRow(), 2).toString());
        comboBoxMushroomEndOfOccurence.setSelectedItem(model.getValueAt(tblMushroom.getSelectedRow(), 3).toString());
    }//GEN-LAST:event_tblMushroomMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RestClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RestClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RestClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RestClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RestClient().setVisible(true);
            }
        });
    }

    public JButton getbLocationCreate() {
        return bLocationCreate;
    }

    public void setbLocationCreate(JButton bLocationCreate) {
        this.bLocationCreate = bLocationCreate;
    }

    public JButton getbLocationDelete() {
        return bLocationDelete;
    }

    public void setbLocationDelete(JButton bLocationDelete) {
        this.bLocationDelete = bLocationDelete;
    }

    public JButton getbLocationUpdate() {
        return bLocationUpdate;
    }

    public void setbLocationUpdate(JButton bLocationUpdate) {
        this.bLocationUpdate = bLocationUpdate;
    }

    public JButton getbMushroomCreate() {
        return bMushroomCreate;
    }

    public void setbMushroomCreate(JButton bMushroomCreate) {
        this.bMushroomCreate = bMushroomCreate;
    }

    public JButton getbMushroomDelete() {
        return bMushroomDelete;
    }

    public void setbMushroomDelete(JButton bMushroomDelete) {
        this.bMushroomDelete = bMushroomDelete;
    }

    public JButton getbMushroomUpdate() {
        return bMushroomUpdate;
    }

    public void setbMushroomUpdate(JButton bMushroomUpdate) {
        this.bMushroomUpdate = bMushroomUpdate;
    }

    public JComboBox getComboBoxMushroomEndOfOccurence() {
        return comboBoxMushroomEndOfOccurence;
    }

    public void setComboBoxMushroomEndOfOccurence(JComboBox comboBoxMushroomEndOfOccurence) {
        this.comboBoxMushroomEndOfOccurence = comboBoxMushroomEndOfOccurence;
    }

    public JComboBox getComboBoxMushroomStartOfOccurence() {
        return comboBoxMushroomStartOfOccurence;
    }

    public void setComboBoxMushroomStartOfOccurence(JComboBox comboBoxMushroomStartOfOccurence) {
        this.comboBoxMushroomStartOfOccurence = comboBoxMushroomStartOfOccurence;
    }

    public JComboBox getComboBoxMushroomType() {
        return comboBoxMushroomType;
    }

    public void setComboBoxMushroomType(JComboBox comboBoxMushroomType) {
        this.comboBoxMushroomType = comboBoxMushroomType;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }

    public void setjLabel1(JLabel jLabel1) {
        this.jLabel1 = jLabel1;
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public void setjLabel2(JLabel jLabel2) {
        this.jLabel2 = jLabel2;
    }

    public JLabel getjLabel3() {
        return jLabel3;
    }

    public void setjLabel3(JLabel jLabel3) {
        this.jLabel3 = jLabel3;
    }

    public JLabel getjLabel4() {
        return jLabel4;
    }

    public void setjLabel4(JLabel jLabel4) {
        this.jLabel4 = jLabel4;
    }

    public JLabel getjLabel5() {
        return jLabel5;
    }

    public void setjLabel5(JLabel jLabel5) {
        this.jLabel5 = jLabel5;
    }

    public JLabel getjLabel6() {
        return jLabel6;
    }

    public void setjLabel6(JLabel jLabel6) {
        this.jLabel6 = jLabel6;
    }

    public JLabel getjLabel8() {
        return jLabel8;
    }

    public void setjLabel8(JLabel jLabel8) {
        this.jLabel8 = jLabel8;
    }

    public JPanel getjPanel1() {
        return jPanel1;
    }

    public void setjPanel1(JPanel jPanel1) {
        this.jPanel1 = jPanel1;
    }

    public JPanel getjPanel2() {
        return jPanel2;
    }

    public void setjPanel2(JPanel jPanel2) {
        this.jPanel2 = jPanel2;
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public void setjScrollPane1(JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    public JScrollPane getjScrollPane3() {
        return jScrollPane3;
    }

    public void setjScrollPane3(JScrollPane jScrollPane3) {
        this.jScrollPane3 = jScrollPane3;
    }

    public JTabbedPane getjTabbedPane1() {
        return jTabbedPane1;
    }

    public void setjTabbedPane1(JTabbedPane jTabbedPane1) {
        this.jTabbedPane1 = jTabbedPane1;
    }

    public JLabel getlMessageLocations() {
        return lMessageLocations;
    }

    public void setlMessageLocations(JLabel lMessageLocations) {
        this.lMessageLocations = lMessageLocations;
    }

    public JLabel getlMessageMushrooms() {
        return lMessageMushrooms;
    }

    public void setlMessageMushrooms(JLabel lMessageMushrooms) {
        this.lMessageMushrooms = lMessageMushrooms;
    }

    public JTable getTblLocation() {
        return tblLocation;
    }

    public void setTblLocation(JTable tblLocation) {
        this.tblLocation = tblLocation;
    }

    public JTable getTblMushroom() {
        return tblMushroom;
    }

    public void setTblMushroom(JTable tblMushroom) {
        this.tblMushroom = tblMushroom;
    }

    public JTextField getTfLocationDescription() {
        return tfLocationDescription;
    }

    public void setTfLocationDescription(JTextField tfLocationDescription) {
        this.tfLocationDescription = tfLocationDescription;
    }

    public JTextField getTfLocationName() {
        return tfLocationName;
    }

    public void setTfLocationName(JTextField tfLocationName) {
        this.tfLocationName = tfLocationName;
    }

    public JTextField getTfLocationNearCity() {
        return tfLocationNearCity;
    }

    public void setTfLocationNearCity(JTextField tfLocationNearCity) {
        this.tfLocationNearCity = tfLocationNearCity;
    }

    public JTextField getTfMushroomName() {
        return tfMushroomName;
    }

    public void setTfMushroomName(JTextField tfMushroomName) {
        this.tfMushroomName = tfMushroomName;
    }
    
    public static List<Long> getMushroomIDs() {
        return mushroomIDs;
    }

    public static void setMushroomIDs(List<Long> mushroomIDs) {
        RestClient.mushroomIDs = mushroomIDs;
    }
    public static List<Long> getLocationIDs() {
        return locationIDs;
    }

    public static void setLocationIDs(List<Long> locationIDs) {
        RestClient.locationIDs = locationIDs;
    }
    
    private static List<Long> locationIDs = new ArrayList<>();

    private static List<Long> mushroomIDs = new ArrayList<>();

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bLocationCreate;
    private javax.swing.JButton bLocationDelete;
    private javax.swing.JButton bLocationUpdate;
    private javax.swing.JButton bMushroomCreate;
    private javax.swing.JButton bMushroomDelete;
    private javax.swing.JButton bMushroomUpdate;
    private javax.swing.JComboBox comboBoxMushroomEndOfOccurence;
    private javax.swing.JComboBox comboBoxMushroomStartOfOccurence;
    private javax.swing.JComboBox comboBoxMushroomType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lMessageLocations;
    private javax.swing.JLabel lMessageMushrooms;
    private javax.swing.JTable tblLocation;
    private javax.swing.JTable tblMushroom;
    private javax.swing.JTextField tfLocationDescription;
    private javax.swing.JTextField tfLocationName;
    private javax.swing.JTextField tfLocationNearCity;
    private javax.swing.JTextField tfMushroomName;
    // End of variables declaration//GEN-END:variables
}
