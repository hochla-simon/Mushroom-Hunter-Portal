/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.mushroomhunter.restclient;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import cz.fi.muni.pa165.mushroomhunter.api.dto.LocationDto;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

/**
 *
 * @author Lukáš Valach
 */
public class RestClient extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    public RestClient() {
        initComponents();
        
        allLocationsSwingWorker = new AllLocationsSwingWorker();
        allLocationsSwingWorker.execute();
        
        bLocationDelete.setEnabled(false);
        bLocationUpdate.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMushroom = new javax.swing.JTable();
        bMushroomDelete = new javax.swing.JButton();
        bMushroomUpdate = new javax.swing.JButton();
        bMushroomCreate = new javax.swing.JButton();
        tfLocationNearCity1 = new javax.swing.JTextField();
        tfLocationDescription1 = new javax.swing.JTextField();
        tfLocationName1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        lMessageMushrooms = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLocation = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfLocationName = new javax.swing.JTextField();
        tfLocationDescription = new javax.swing.JTextField();
        tfLocationNearCity = new javax.swing.JTextField();
        bLocationCreate = new javax.swing.JButton();
        bLocationUpdate = new javax.swing.JButton();
        bLocationDelete = new javax.swing.JButton();
        lMessageLocations = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblMushroom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Start of occurence", "End of occurence"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblMushroom);

        bMushroomDelete.setText("Delete mushroom");
        bMushroomDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMushroomDeleteActionPerformed(evt);
            }
        });

        bMushroomUpdate.setText("Update mushroom");
        bMushroomUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMushroomUpdateActionPerformed(evt);
            }
        });

        bMushroomCreate.setText("Create mushroom");
        bMushroomCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMushroomCreateActionPerformed(evt);
            }
        });

        tfLocationName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfLocationName1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Name");

        jLabel5.setText("Type");

        jLabel6.setText("Start of occurence");

        jLabel8.setText("End of occurence");

        lMessageMushrooms.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(bMushroomCreate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(bMushroomUpdate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(bMushroomDelete))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tfLocationName1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                        .addComponent(tfLocationDescription1, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(tfLocationNearCity1, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING))))
                            .addComponent(lMessageMushrooms, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6)
                        .addComponent(jLabel8))
                    .addContainerGap(700, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfLocationName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(tfLocationDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(tfLocationNearCity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bMushroomCreate)
                    .addComponent(bMushroomUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bMushroomDelete))
                .addGap(18, 18, 18)
                .addComponent(lMessageMushrooms, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(17, 17, 17)
                    .addComponent(jLabel4)
                    .addGap(12, 12, 12)
                    .addComponent(jLabel5)
                    .addGap(12, 12, 12)
                    .addComponent(jLabel6)
                    .addGap(12, 12, 12)
                    .addComponent(jLabel8)
                    .addContainerGap(363, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Manage mushrooms", jPanel1);

        tblLocation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Description", "Near city"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblLocation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLocationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblLocation);

        jLabel1.setText("Name");

        jLabel2.setText("Description");

        jLabel3.setText("Near city");

        tfLocationName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfLocationNameActionPerformed(evt);
            }
        });

        bLocationCreate.setText("Create location");
        bLocationCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLocationCreateActionPerformed(evt);
            }
        });

        bLocationUpdate.setText("Update location");
        bLocationUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLocationUpdateActionPerformed(evt);
            }
        });

        bLocationDelete.setText("Delete location");
        bLocationDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLocationDeleteActionPerformed(evt);
            }
        });

        lMessageLocations.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                    .addGap(18, 18, 18))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(28, 28, 28)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tfLocationNearCity)
                                .addComponent(tfLocationDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                                .addComponent(tfLocationName)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(bLocationCreate)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(bLocationUpdate)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(bLocationDelete)))
                    .addComponent(lMessageLocations, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfLocationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfLocationDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfLocationNearCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bLocationCreate)
                    .addComponent(bLocationUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bLocationDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lMessageLocations, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Manage locations", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bLocationCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLocationCreateActionPerformed
        lMessageLocations.setText("");
        DefaultTableModel model = (DefaultTableModel) tblLocation.getModel();
        if (tfLocationName.getText().trim().equals("")) {
            lMessageLocations.setText("Location name cannot be empty.");
            return;
        }
        if (tfLocationName.getText().trim().length() > 20) {
            lMessageLocations.setText("Location cannot be longer than 20 characters.");
            return;
        }
        if (tfLocationDescription.getText().trim().length() > 20) {
            lMessageLocations.setText("Location cannot be longer than 200 characters.");
            return;
        }
        if (tfLocationNearCity.getText().trim().length() > 20) {
            lMessageLocations.setText("Location cannot be longer than 20 characters.");
            return;
        }
        locationCreateSwingWorker = new LocationCreateSwingWorker();
        locationCreateSwingWorker.execute();
    }//GEN-LAST:event_bLocationCreateActionPerformed

    private void bLocationUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLocationUpdateActionPerformed
        lMessageLocations.setText("");
        DefaultTableModel model = (DefaultTableModel) tblLocation.getModel();
        if (tblLocation.getSelectedRow() == -1) {
            if (tblLocation.getRowCount() == 0) {
                lMessageLocations.setText("There are no locations to be updated.");
            }
            else  {
                lMessageLocations.setText("Please select signle location.");
            }
        } else {
            locationUpdateSwingWorker = new LocationUpdateSwingWorker();
            locationUpdateSwingWorker.execute();
        }
    }//GEN-LAST:event_bLocationUpdateActionPerformed

    private void bLocationDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLocationDeleteActionPerformed
        bLocationDelete.setEnabled(false);
        bLocationUpdate.setEnabled(false);

        //lMessage.setText(texts.getString("errTableEmpty"));

        DefaultTableModel model = (DefaultTableModel) tblLocation.getModel();
        if (tblLocation.getSelectedRow() == -1) {
            if (tblLocation.getRowCount() == 0) {
                lMessageLocations.setText("There are no locations to be deleted.");
            }
            else  {
                lMessageLocations.setText("Please select signle location.");
            }
        } else {
            locationDeleteSwingWorker = new LocationDeleteSwingWorker();
            locationDeleteSwingWorker.execute();
        }
    }//GEN-LAST:event_bLocationDeleteActionPerformed

    private void tfLocationNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfLocationNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfLocationNameActionPerformed

    private void bMushroomDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMushroomDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bMushroomDeleteActionPerformed

    private void bMushroomUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMushroomUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bMushroomUpdateActionPerformed

    private void bMushroomCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMushroomCreateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bMushroomCreateActionPerformed

    private void tfLocationName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfLocationName1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfLocationName1ActionPerformed

    private void tblLocationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLocationMouseClicked
        bLocationDelete.setEnabled(true);
        bLocationUpdate.setEnabled(true);
        
        DefaultTableModel model = (DefaultTableModel) tblLocation.getModel();
        tfLocationName.setText(model.getValueAt(tblLocation.getSelectedRow(), 0).toString());
        tfLocationDescription.setText(model.getValueAt(tblLocation.getSelectedRow(), 1).toString());
        tfLocationNearCity.setText(model.getValueAt(tblLocation.getSelectedRow(), 2).toString());
    }//GEN-LAST:event_tblLocationMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RestClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RestClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RestClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RestClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RestClient().setVisible(true);
            }
        });
    }
    
private static List<Long> locationIDs = new ArrayList<>();
    
private LocationCreateSwingWorker locationCreateSwingWorker;
    
 private class LocationCreateSwingWorker extends SwingWorker<Void,Void> {

        @Override
        protected Void doInBackground() throws Exception {
            LocationDto locationDto = new LocationDto();
            locationDto.setName(tfLocationName.getText());
            locationDto.setDescription(tfLocationDescription.getText());
            locationDto.setNearCity(tfLocationNearCity.getText());
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            List<MediaType> mediaTypeList = new ArrayList<MediaType>();
            mediaTypeList.add(MediaType.ALL);
            headers.setAccept(mediaTypeList);

            ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
            String json = ow.writeValueAsString(locationDto);
            HttpEntity request = new HttpEntity(json, headers);

            RestTemplate restTemplate = new RestTemplate();
            Long[] result = restTemplate.postForObject("http://localhost:8080/pa165/rest/location", request, Long[].class);
            
            locationIDs.add(result[0]);
            return null;
        }

        @Override
        protected void done() {
            DefaultTableModel model = (DefaultTableModel) tblLocation.getModel();
            model.addRow(new Object[]{tfLocationName.getText(), tfLocationDescription.getText(),tfLocationNearCity.getText()});
        }
    }
   
 private LocationUpdateSwingWorker locationUpdateSwingWorker;

    private class LocationUpdateSwingWorker extends SwingWorker<Integer, Void> {
        @Override
        protected Integer doInBackground() throws Exception {
            DefaultTableModel model = (DefaultTableModel) tblLocation.getModel();
            int selectedRow = tblLocation.getSelectedRow();

            LocationDto locationDto = getLocationDetail(locationIDs.get(selectedRow));
            locationDto.setName(tfLocationName.getText());
            locationDto.setDescription(tfLocationDescription.getText());
            locationDto.setNearCity(tfLocationNearCity.getText());
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            List<MediaType> mediaTypeList = new ArrayList<MediaType>();
            mediaTypeList.add(MediaType.APPLICATION_JSON);
            headers.setAccept(mediaTypeList);

            ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
            String json = ow.writeValueAsString(locationDto);
            HttpEntity request = new HttpEntity(json, headers);

            RestTemplate restTemplate = new RestTemplate();
            ResponseEntity<LocationDto> newlocation = restTemplate.exchange("http://localhost:8080/pa165/rest/location", HttpMethod.PUT, request, LocationDto.class);
            LocationDto updatedLocation = newlocation.getBody();
            return selectedRow;
        }
        @Override
        protected void done() {
            DefaultTableModel model = (DefaultTableModel) tblLocation.getModel();
            try {
                model.setValueAt(tfLocationName.getText(), get(), 0);
                model.setValueAt(tfLocationDescription.getText(), get(), 1);
                model.setValueAt(tfLocationNearCity.getText(), get(), 2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (ExecutionException e) {
                e.printStackTrace();
            }
        }
    }
    
    private LocationDeleteSwingWorker locationDeleteSwingWorker;

    private class LocationDeleteSwingWorker extends SwingWorker<Integer, Void> {
        protected Integer doInBackground() throws Exception {
            int selectedRow = tblLocation.getSelectedRow();
            RestTemplate restTemplate = new RestTemplate();
            restTemplate.delete("http://localhost:8080/pa165/rest/location/" + locationIDs.get(selectedRow));
            locationIDs.remove(selectedRow);
            return selectedRow;
        }
        protected void done() {
            DefaultTableModel model = (DefaultTableModel) tblLocation.getModel();
            try {
                model.removeRow(get());
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (ExecutionException e) {
                e.printStackTrace();
            }
        }
    }
    
    private AllLocationsSwingWorker allLocationsSwingWorker;

    private class AllLocationsSwingWorker extends SwingWorker<List<LocationDto>, Void> {
        @Override
        protected List<LocationDto> doInBackground() throws Exception {
            return getLocationList();
        }

        @Override
        protected void done() {
            try {
                List<LocationDto> list = get();
                DefaultTableModel model = (DefaultTableModel) tblLocation.getModel();
                model.setRowCount(0);
                for (int i = 0; i < list.size(); i++) {
                    locationIDs.add(list.get(i).getId());
                    model.addRow(new Object[]{list.get(i).getName(), list.get(i).getDescription(), list.get(i).getNearCity()});
                }
            } catch (ExecutionException ex) {

            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted", ex);
            }
        }
    }
    
    private LocationDto getLocationDetail(Long locationId) throws RestClientException {
        RestTemplate restTemplate = new RestTemplate();
        LocationDto location = restTemplate.getForObject("http://localhost:8080/pa165/rest/location/" + locationId, LocationDto.class);
        return location;
    }
    
    //Send GET to URL and get array of objects
    private List<LocationDto> getLocationList() throws RestClientException {
        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<LocationDto[]> responseEntity = restTemplate.getForEntity("http://localhost:8080/pa165/rest/location/", LocationDto[].class);
        LocationDto[] locationDtoArray = responseEntity.getBody();
        List<LocationDto> locationDtoList = new ArrayList<>();
        locationDtoList.addAll(Arrays.asList(locationDtoArray));
        return locationDtoList;
    }
    
    //Send GET to URL and get array of objects
    private void getLocationListWithOccurence() throws RestClientException {
        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<LocationDto[]> responseEntity = restTemplate.getForEntity("http://localhost:8080/pa165/rest/location/withMushroomOccurence", LocationDto[].class);
        LocationDto[] locationDtoArray = responseEntity.getBody();
        for (int i = 0; i < locationDtoArray.length; i++) {
            LocationDto location = locationDtoArray[0];
            System.out.println("Id:                 " + location.getId());
            System.out.println("Name:               " + location.getName());
            System.out.println("Description:        " + location.getDescription());
            System.out.println("Near city:          " + location.getNearCity());
            System.out.println("Mushroom occurence: " + location.getMushroomOccurence());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bLocationCreate;
    private javax.swing.JButton bLocationDelete;
    private javax.swing.JButton bLocationUpdate;
    private javax.swing.JButton bMushroomCreate;
    private javax.swing.JButton bMushroomDelete;
    private javax.swing.JButton bMushroomUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lMessageLocations;
    private javax.swing.JLabel lMessageMushrooms;
    private javax.swing.JTable tblLocation;
    private javax.swing.JTable tblMushroom;
    private javax.swing.JTextField tfLocationDescription;
    private javax.swing.JTextField tfLocationDescription1;
    private javax.swing.JTextField tfLocationName;
    private javax.swing.JTextField tfLocationName1;
    private javax.swing.JTextField tfLocationNearCity;
    private javax.swing.JTextField tfLocationNearCity1;
    // End of variables declaration//GEN-END:variables
}
